syntax on
set number
set showmatch
set tw:1337
set hls is
set showcmd
set autoread 
set incsearch
set shiftwidth=2
set softtabstop=2
set backspace=2
set expandtab
set autoindent
set smartindent
set smarttab
set encoding=utf-8
set nocompatible      " We're running Vim, not Vi!

" True colors in vim
set termguicolors
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"

" mouse support
set mouse=a
" mouse support on more than 220 cols
set ttymouse=sgr

" Persistent undo !
set undofile                 "turn on the feature  
set undodir=$HOME/.vim/undo  "directory where the undo files will be stored.

" colorecting colorscheme
" set t_Co=256
set clipboard=unnamed

autocmd Filetype gitcommit setlocal spell textwidth=72
autocmd Filetype markdown setlocal spell spelllang=fr
autocmd Filetype markdown hi SpellBad cterm=underline ctermfg=red

nnoremap <F5> :ALEFix<CR>
nnoremap <F6> :lw<CR>
nnoremap <F7> :lcl<CR>
nnoremap <F8> :call LanguageClient_contextMenu()<CR>

inoremap III <Esc>I
inoremap AAA <Esc>A
inoremap OOO <Esc>o

nnoremap <D-s> :w<cr>
inoremap <D-s> <Esc>:w<cr>i

nnoremap ¬      :tabnext<CR>
nnoremap ˙      :tabprevious<CR>
nnoremap <C-t>  :tabnew<CR> 
inoremap ¬      <Esc>:tabnext<CR>i
inoremap ˙      <Esc>:tabprevious<CR>i
inoremap <C-t>  <Esc>:tabnew<CR>

if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-rails'
Plug 'mhinz/vim-signify'
Plug 'thoughtbot/vim-rspec'
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-commentary'
Plug 'docunext/closetag.vim'
Plug 'easymotion/vim-easymotion'
Plug 'lifepillar/vim-solarized8'
Plug 'rking/ag.vim'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'bling/vim-airline'
Plug 'rizzatti/funcoo.vim'
Plug 'rizzatti/dash.vim'
Plug 'mattn/webapi-vim'
Plug 'mattn/gist-vim'
Plug 'mileszs/ack.vim'
Plug 'dense-analysis/ale'
Plug 'tpope/vim-unimpaired'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'epilande/vim-es2015-snippets'
Plug 'epilande/vim-react-snippets'
Plug 'christoomey/vim-tmux-navigator'
Plug 'dhruvasagar/vim-zoom'
Plug 'mechatroner/rainbow_csv'
Plug 'kshenoy/vim-signature'
Plug 'rhysd/vim-grammarous'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()

set rtp+=/usr/local/opt/fzf

" Quality of life for completion
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

nmap ; :Buffers<CR>
nmap <Leader>e :Files<CR>
nmap <Leader>r :Tags<CR>

let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <c-s-l> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-s-k> :TmuxNavigateDown<cr>
nnoremap <silent> <c-s-j> :TmuxNavigateUp<cr>
nnoremap <silent> <c-s-h> :TmuxNavigateRight<cr>

let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetDirectories = ['~/.vim/UltiSnips', 'UltiSnips']

" let g:UltiSnipsExpandTrigger       = "<c-l>"
" let g:UltiSnipsListSnippets        = "<c-k>"
" let g:UltiSnipsJumpForwardTrigger  = "<tab>"
" let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

set wildmode=list:longest,list:full

set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#ale#enabled = 1

set background=dark " dark | light "
colorscheme solarized8

let g:grammarous#default_comments_only_filetypes = {
      \ '*' : 1, 'help' : 0, 'markdown' : 0,
      \ }
set regexpengine=1

let g:gitgutter_signs = 0

let g:javascript_plugin_flow = 1

let g:ale_fixers = {}
let g:ale_fixers['ruby'] = ['rubocop']
let g:ale_fixers['rake'] = ['rubocop']
let g:ale_fixers['javascript'] = ['eslint']
let g:ale_fixers['json'] = ['prettier']
let g:ale_fixers['tex'] = ['textlint']
let g:ale_fixers['markdown'] = ['prettier']
let g:ale_javascript_prettier_eslint_options = '--single-quote --trailing-comma all --no-semi'
let g:ale_fix_on_save = 1
let g:ale_ruby_rubocop_executable = 'bundle'

let g:ale_linters = {
      \   'javascript': ['eslint', 'flow'],
      \   'ruby': ['rubocop'],
      \   'rake': ['rubocop'],
      \   'scss': ['scss_lint'],
      \   'html': ['tidy'],
      \   'json': ['prettier'],
      \   'tex':  ['textlint'],
      \   'markdown':  ['prettier'],
      \}

let g:LanguageClient_serverCommands = {
    \ 'javascript': ['flow-language-server', '--stdio'],
    \ 'javascript.jsx': ['flow-language-server', '--stdio'],
    \ 'ruby': ['solargraph','stdio']
    \ }

let g:used_javascript_libs = 'jquery,underscore'

if filereadable($HOME . "/.vimrc.local")
  source $HOME/.vimrc.local
endif


