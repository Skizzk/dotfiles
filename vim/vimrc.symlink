syntax on
set number
set showmatch
set mouse=a
set tw:1337
set si
set hls is
set showcmd
set autoread 
set incsearch
set shiftwidth=2
set softtabstop=2
set backspace=2
set expandtab
set autoindent
set smartindent
set smarttab
set nocompatible      " We're running Vim, not Vi!
filetype on           " Enable filetype detection
filetype indent on    " Enable filetype-specific indenting
filetype plugin on    " Enable filetype-specific plugins
filetype plugin indent on

if &term =~ '^screen'
  set ttymouse=xterm2
endif

" colorecting colorscheme
set t_Co=256
set clipboard=unnamed

autocmd Filetype gitcommit setlocal spell textwidth=72
autocmd Filetype markdown setlocal spell spelllang=fr
autocmd Filetype markdown hi SpellBad cterm=underline ctermfg=red

nnoremap <F5> :ALEFix<CR>
nnoremap <F6> :lw<CR>
nnoremap <F7> :lcl<CR>

inoremap III <Esc>I
inoremap AAA <Esc>A
inoremap OOO <Esc>o

nnoremap ¬      :tabnext<CR>
nnoremap ˙      :tabprevious<CR>
nnoremap <C-t>  :tabnew<CR> 
inoremap ¬      <Esc>:tabnext<CR>i
inoremap ˙      <Esc>:tabprevious<CR>i
inoremap <C-t>  <Esc>:tabnew<CR>

filetype off          " required!

set rtp+=~/.vim/bundle/vundle
call vundle#rc()

"let Vundle manage Vundle
"required!
Bundle 'gmarik/vundle'
Bundle 'scrooloose/nerdtree'
Bundle 'tpope/vim-bundler'
Bundle 'tpope/vim-rails'
Bundle 'thoughtbot/vim-rspec'
Bundle "sheerun/vim-polyglot"
Bundle 'tpope/vim-abolish'
Bundle 'altercation/vim-colors-solarized'
Bundle 'rking/ag.vim'
Bundle 'tpope/vim-fugitive'
Bundle 'airblade/vim-gitgutter'
Bundle 'bling/vim-airline'
Bundle 'rizzatti/funcoo.vim'
Bundle 'rizzatti/dash.vim'
Bundle 'mattn/webapi-vim'
Bundle 'mattn/gist-vim'
Bundle 'mileszs/ack.vim'
Bundle 'w0rp/ale'
Plugin 'tpope/vim-unimpaired'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'epilande/vim-es2015-snippets'
Plugin 'epilande/vim-react-snippets'
Bundle 'christoomey/vim-tmux-navigator'
Plugin 'dhruvasagar/vim-zoom'

" Rename.vim  -  Rename a buffer within Vim and on the disk
"
" Copyright June 2007-2011 by Christian J. Robinson <heptite@gmail.com>
"
" Distributed under the terms of the Vim license.  See ":help license".
"
" Usage:
"
" :Rename[!] {newname}

command! -nargs=* -complete=file -bang Rename call Rename(<q-args>, '<bang>')

function! Rename(name, bang)
	let l:name    = a:name
	let l:oldfile = expand('%:p')

	if bufexists(fnamemodify(l:name, ':p'))
		if (a:bang ==# '!')
			silent exe bufnr(fnamemodify(l:name, ':p')) . 'bwipe!'
		else
			echohl ErrorMsg
			echomsg 'A buffer with that name already exists (use ! to override).'
			echohl None
			return 0
		endif
	endif

	let l:status = 1

	let v:errmsg = ''
	silent! exe 'saveas' . a:bang . ' ' . l:name

	if v:errmsg =~# '^$\|^E329'
		let l:lastbufnr = bufnr('$')

		if expand('%:p') !=# l:oldfile && filewritable(expand('%:p'))
			if fnamemodify(bufname(l:lastbufnr), ':p') ==# l:oldfile
				silent exe l:lastbufnr . 'bwipe!'
			else
				echohl ErrorMsg
				echomsg 'Could not wipe out the old buffer for some reason.'
				echohl None
				let l:status = 0
			endif

			if delete(l:oldfile) != 0
				echohl ErrorMsg
				echomsg 'Could not delete the old file: ' . l:oldfile
				echohl None
				let l:status = 0
			endif
		else
			echohl ErrorMsg
			echomsg 'Rename failed for some reason.'
			echohl None
			let l:status = 0
		endif
	else
		echoerr v:errmsg
		let l:status = 0
	endif

	return l:status
endfunction

let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <c-s-l> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-s-k> :TmuxNavigateDown<cr>
nnoremap <silent> <c-s-j> :TmuxNavigateUp<cr>
nnoremap <silent> <c-s-h> :TmuxNavigateRight<cr>

let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetDirectories = ['~/.vim/UltiSnips', 'UltiSnips']

let g:UltiSnipsExpandTrigger       = "<c-l>"
let g:UltiSnipsListSnippets        = "<c-k>"
let g:UltiSnipsJumpForwardTrigger  = "<tab>"
let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

set wildmode=list:longest,list:full

set laststatus=2
let g:airline_powerline_fonts = 1
let g:airline#extensions#ale#enabled = 1

set background=dark " dark | light "
colorscheme solarized

" Tab completion
set complete=.,w,t,b,i
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>

set regexpengine=1

let g:javascript_plugin_flow = 1

let g:ale_fixers = {}
let g:ale_fixers['javascript'] = ['prettier']
let g:ale_fixers['ruby'] = ['rubocop']
let g:ale_javascript_prettier_options = '--single-quote --trailing-comma all --no-semi'
let g:ale_fix_on_save = 1

let g:ale_linters = {
      \   'javascript': ['eslint', 'flow'],
      \   'ruby': ['rubocop'],
      \   'scss': ['scss_lint'],
      \   'html': ['tidy'],
      \}

let g:used_javascript_libs = 'jquery,underscore'

filetype plugin indent on     " required!
if filereadable($HOME . "/.vimrc.local")
  source $HOME/.vimrc.local
endif
